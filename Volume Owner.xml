<?xml version="1.0" encoding="UTF-8"?><extensionAttribute>
<displayName>Volume Owner</displayName>
<description>Extension attribute to report all Volume Owners on Apple Silicon Macs</description>
<dataType>string</dataType>
<scriptContentsMac>#!/bin/zsh&#13;
&#13;
# Extension attribute to report all Volume Owners on Apple Silicon Macs&#13;
# If a user is found to be a volume owner, the results will be displayed as:&#13;
#   Admins: user1, user2 (or "None" if none found)&#13;
#   Non-Admins: user1, user2 (or "None" if none found)&#13;
#&#13;
# If no user is found to have be a volume owner, the result will be:&#13;
#   "No Volume Owners"&#13;
# If an unsupported file system is found, the result will be:&#13;
#   Unsupported File System: (File System Type)&#13;
# If an unsupported architecture, the result will be:&#13;
#   Unsupported Platform: (architecture)&#13;
&#13;
# Variable to determine File System Personality&#13;
fsType="$(/usr/sbin/diskutil info / | /usr/bin/awk 'sub(/File System Personality: /,""){print $0}')"&#13;
&#13;
# Exit if not APFS&#13;
if [[ "$fsType" != *APFS* ]]; then&#13;
    echo "&lt;result&gt;Unsupported File System: $fsType&lt;/result&gt;"&#13;
    exit 0&#13;
fi&#13;
&#13;
# Variable to determine architecture of Mac&#13;
platform=$(/usr/bin/arch)&#13;
&#13;
# Exit if not running on Apple Silicon&#13;
if [[ "$platform" != "arm64" ]]; then&#13;
    echo "&lt;result&gt;Unsupported Platform: $platform&lt;/result&gt;"&#13;
    exit 0&#13;
fi&#13;
&#13;
# Variable to gather list of admins&#13;
# adminusers=$(/usr/bin/dscl . -read /Groups/admin | /usr/bin/awk '/GroupMembership:/{for(i=3;i&lt;=NF;++i)print $i}')&#13;
&#13;
# Creating empty arrays to store admin and non-admin volume owners&#13;
volumeOwnerAdmins=()&#13;
volumeOwnerUsers=()&#13;
&#13;
# Determine number of APFS users&#13;
totalAPFSUsers=$(/usr/sbin/diskutil apfs listUsers / | /usr/bin/awk '/\+\-\-/ {print $2}' | /usr/bin/wc -l)&#13;
&#13;
# Get APFS User information in plist format&#13;
apfsUsersPlist=$(/usr/sbin/diskutil apfs listUsers / -plist)&#13;
&#13;
# Loop through all APFS Crypto Users&#13;
for (( n=0; n&lt;$totalAPFSUsers; n++ )); do&#13;
    # Determine APFS Crypto User UUID&#13;
    apfsCryptoUserUUID=$(/usr/libexec/PlistBuddy -c "print :Users:"$n":APFSCryptoUserUUID" /dev/stdin &lt;&lt;&lt;"$apfsUsersPlist")&#13;
    &#13;
    # Determine volume owner status for APFS Crypto User&#13;
    userVolumeOwnerStatus=$(/usr/libexec/PlistBuddy -c "print :Users:"$n":VolumeOwner" /dev/stdin &lt;&lt;&lt;"$apfsUsersPlist")&#13;
    &#13;
    # If volume owner, determine username, otherwise move to next APFS user&#13;
    if [[ "$userVolumeOwnerStatus" = true ]]; then&#13;
        username="$(/usr/bin/dscl . -search /Users GeneratedUID ${apfsCryptoUserUUID} | /usr/bin/awk 'NR==1{print $1}')"&#13;
    else&#13;
        continue&#13;
    fi&#13;
    &#13;
    # For user in local directory, determine if volume owner is an admin&#13;
    if [[ -z "$username" ]]; then&#13;
        continue&#13;
    elif /usr/sbin/dseditgroup -o checkmember -m "$username" admin &amp;&gt;/dev/null; then&#13;
        volumeOwnerAdmins+=($username)&#13;
    else&#13;
        volumeOwnerUsers+=($username)&#13;
    fi&#13;
done&#13;
&#13;
# Populate list of admin volume owners&#13;
if [[ -z ${volumeOwnerAdmins[@]} ]]; then&#13;
    voList="$(echo "Admins: None")"&#13;
else&#13;
    voList="$(echo "Admins: ${volumeOwnerAdmins[1]}")"&#13;
    &#13;
    for user in ${volumeOwnerAdmins[@]:1}; do&#13;
        voList+=", $user"&#13;
    done&#13;
fi&#13;
&#13;
# Populate list of non-admin volume owners&#13;
if [[ -z ${volumeOwnerAdmins[@]} ]] &amp;&amp; [[ -z ${volumeOwnerUsers[@]} ]]; then&#13;
    voList="$(echo "No Volume Owner")"&#13;
elif [[ -z ${volumeOwnerUsers[@]} ]]; then&#13;
    voList+="\n$(echo "Non-Admins: None")"&#13;
else&#13;
    voList+="\n$(echo "Non-Admins: ${volumeOwnerUsers[1]}")"&#13;
    &#13;
    for user in ${volumeOwnerUsers[@]:1}; do&#13;
        voList+=", $user"&#13;
    done&#13;
fi&#13;
&#13;
echo "&lt;result&gt;$voList&lt;/result&gt;"</scriptContentsMac>
</extensionAttribute>
